Why do we need Xpath and CssSelector?
-- Developers will not provide all the locators in the html
-- By using xpath and CssSelector we can identify elements with any given attribute

What is an Xpath?
-- Xpath is like a query language which helps us to identify elements uniquely on the web page

    to open a selector click command+f for mac and ctrl+f for windows

    types of Xpath
    -- Absolute Xpath --> starts from starting node in html
                          it always starts with single slash (/)
                          example:/html/body/div/div/div
    -- Relative Xpath --> starts from any node from html
                          it starts with double forward slash (//)

    Syntax for relative Xpath:
    //tagname[@attribute = 'attribute value']
    example: //input[@id = 'email']

    Identifying element by relative xpath using text:
    //tagname[text() = 'text value']
    example: //a[text() = 'Fashion']

    contains: will identify an element with a partial attribute value
    //tagname[contains(@attribute, 'partial attribute value')]
    example: //input[contains(@placeholder, 'Email')]
    example: //a[contains(text(), 'Create New')]

    Starts-with: will identify the element with starting partial value
    //tagname[starts-with(@attribute, 'partial starting attribute value')]
    example: //div[starts-with(text(),'Click')]

    ends-with: was used in xpath 1.0, we are using 2.0 and this method is not available

    <div> -- division
    <img> -- images
    <h> -- header
    <p> -- paragraph
    <li> -- list
    <ul> -- unordered list
    <ol> -- ordered list

    Advanced Xpath:
    -- is based on parent and child, sibling relationship

    identifying elements by following sibling:
    //tagname[@attribute = 'attribute value']/following-sibling::tagname
    example: //input[@id = 'calFromDate']/following-sibling::img

    identifying elements by preceding siblings:
    //tagname[@attribute = 'attribute value']/preceding-sibling::tagname
    example: //span[text() = '& Orders']/preceding-sibling::span

    identifying elements by it parent:
    //tagname[@attribute = 'attribute value']/parent::parentTagname
    Example: //span[text() = '& Orders']/parent::a

    identifying elements by its ancestor:
    //tagname[@attribute = 'attribute value']/ancestor::ancestorTagname
    example: //input[@id = 'email']/ancestor::form

    identifying elements by index:
    add [number] at the end
    example (//img[@class = 'ui-datepicker-trigger'])[2]
    should be the last resort


